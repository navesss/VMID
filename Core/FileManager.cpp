// FileManager.cpp
//

#include "stdafx.h"
#include "FileManager.h"
#include "volume.h"
#include "reader.h"
#include "Vrmlobject.h"
#include "GLVisualizer.h"
#include "mesh.h"

#include "line_stream.h"
#include <fstream>
#include <iomanip> 


#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

using namespace std;

FileManager::FileManager()
{
}

FileManager::~FileManager()
{
}

Volume* FileManager::read_MRC(CString filename)
{
	vector<string> lines;

	VolumeReader* reader ;


	reader = MRCReaderPicker::pick(filename.GetBuffer()) ;
	Volume *vol = NULL;
	
	vol = reader->getVolume() ;
	
	delete reader;
	return vol;
}

Volume* FileManager::read_SOF(CString filename)
{
	vector<string> lines;

	VolumeReader* reader ;


	reader = new SOFReader(filename.GetBuffer()) ;
	Volume *vol = NULL;

	vol = reader->getVolume() ;
	//vol->floodFill( 0 ) ;

	delete reader;
	return vol;
}

CMesh* FileManager::read_OBJ(CString filename)
{
	CMesh* mesh = new CMesh;
	load_obj(filename, mesh);
	return mesh;
}

void FileManager::write_MRC(Volume *vol, CString filename)
{
	vol->toMRCFile(filename.GetBuffer());
}


void FileManager::write_VRML(GLVisualizer *gl, CString filename)
{
	CMesh *mesh = gl->m_volMesh;

	const char *String1 =
		"#VRML V1.0 ascii\n"
		"Separator {	#Produced by the marchin cubes algorithm\n"
		"				#Implemented by Marcus Hewat, all rights reserved\n"
		"Info {string \"Generated by Marcus Hewat's marching cubes implementation\"}\n"
		"DEF front PerspectiveCamera {\n"
		"position         0.5  0.5 2.5\n"
		"orientation      0 0 1  0\n"
		"focalDistance    5\n"
		"heightAngle      0.785398}\n"
		"DEF top PerspectiveCamera {\n"
		"position         0.5  2 0.5\n"
		"orientation      1 0 0  -1.57\n"
		"focalDistance    5\n"
		"heightAngle      0.785398}\n"
		"DEF under PerspectiveCamera {\n"
		"position         0.5  -1.5 0.5\n"
		"orientation      1 0 0  1.57\n"
		"focalDistance    5\n"
		"heightAngle      0.785398}\n"
		"DEF left PerspectiveCamera {\n"
		"position         2 0.5 0.5\n"
		"orientation      0 1 0  1.57\n"
		"focalDistance    5\n"
		"heightAngle      0.785398}\n"
		"DEF right PerspectiveCamera {\n"
		"position         -1 0.5 0.5\n"
		"orientation      0 1 0  -1.57\n"
		"focalDistance    5\n"
		"heightAngle      0.785398}\n"
		"	Material {diffuseColor 0 0.8 0.2}\n"
		"		NormalBinding {value PER_VERTEX}\n"
		"		Coordinate3 {\n"
		"			point [\n";
	const char *String2 = "]\n"
		"	}\n"
		"	IndexedFaceSet {\n"
		"		#clockwise from the outside:\n"
		"		coordIndex [	\n";
	const char *String3 = "\n"
		"		]\n"
		"	}\n"
		"}\n";

	int i, nv, nf;

	nv = mesh->NbVertex();
	nf = mesh->NbFace();

	FILE *outfile = fopen(filename.GetBuffer(), "w");

	//fprintf(This->MyOutFile,String1);
	fprintf(outfile,String1);

	for(i=0; i<nv; i++)
	{
		//fprintf(This->MyOutFile,"%f %f %f,\n",tmp1->x,tmp1->y,tmp1->z);
		Point3D pt = mesh->getVertex(i)->getPoint();
		fprintf(outfile,"%f %f %f,\n",pt.x,pt.y,pt.z);
	}

	//fprintf(This->MyOutFile,String2);
	fprintf(outfile,String2);
	for(i=0; i<nf; i++)
	{
		//fprintf(This->MyOutFile,"%i, %i, %i, -1,\n",tmp2->b,tmp2->a,tmp2->c);
		CFace *pF = mesh->getFace(i);
		
		fprintf(outfile,"%i, %i, %i, -1,\n",
				pF->getVertex(0)->GetID(),
				pF->getVertex(1)->GetID(),
				pF->getVertex(2)->GetID());		
	}
	//fprintf(This->MyOutFile,String3);
	fprintf(outfile,String3);

	fclose(outfile);
}


void load_obj(const char* filename, CMesh* mesh) 
{
	std::ifstream input(filename) ;
	Geex::LineInputStream in(input) ;
	int fidx = 0, vidx = 0 ;

	while(!in.eof()) {
		in.get_line() ;
		std::string keyword ;

		in >> keyword ;

		if(keyword == "v") {
			double x, y, z ;
			in >> x >> y >> z ;
			CVertex *vertex = new CVertex(x,y,z);
			vertex->SetID(vidx++);
			mesh->addVertex(vertex);

			//            vec3 p ;
			//            in >> p ;
			//            vertices.push_back(p) ;
			//			vertices_.push_back(MeshVertex(p)) ;
			////				nb_vertices_++ ;				
		} else if(keyword == "f") {
			std::vector<int> cur_facet ;
			while(!in.eol()) {
				std::string s ;
				in >> s ;
				if(s.length() > 0) {
					std::istringstream v_input(s) ;
					int index ;
					v_input >> index ;
					if(index < 1 || index > vidx/*vertices_.size()*/) {
						std::cerr << "Out of bounds vertex index" << std::endl ;
					} else {
						cur_facet.push_back(index - 1) ;
					}
					char c ;
					v_input >> c ;
					// tex vertex, ignored
					if(c == '/') {
						v_input >> index ;
					}
				}
			}
			if(cur_facet.size() < 3) {
				std::cerr << "facet with less than 3 vertices, ignoring" << std::endl ;
			} else {
				for(unsigned int i=1; i<cur_facet.size() - 1; i++) {
					int id0 = cur_facet[0] ;
					int id1 = cur_facet[i] ;
					int id2 = cur_facet[i+1] ;
					//for(i=0; i<NbFace; i++)
					//{
					//	int v1, v2, v3;
					//	fscanf(fp, "%d%d%d", &v1, &v2, &v3);
					CFace *pFace = new CFace(mesh->getVertex(id0),
						mesh->getVertex(id1),
						mesh->getVertex(id2));
					pFace->SetID(fidx++);
					mesh->addFace(pFace);
					//}
					//                    //const vec3& p0 = vertices_[ id0 ].pos_ ;
					//                    //const vec3& p1 = vertices_[ id1 ].pos_ ;
					//                    //const vec3& p2 = vertices_[ id2 ].pos_ ;
					//                    const vec3& p0 = vertices[ id0 ] ;
					//                    const vec3& p1 = vertices[ id1 ] ;
					//                    const vec3& p2 = vertices[ id2 ] ;
					//
					////						std::cout <<"M:" <<pt0 << " " << pt1 << " " << pt2 << "\nR:" << p0 <<" " <<p1 << " " << p2 << std::endl;
					//                    bool e0 = true ;
					//                    bool e1 = (i == cur_facet.size() - 2) ;
					//                    bool e2 = (i == 1) ;
					//                    push_back(Facet(p0, p1, p2, e0, e1, e2, id0, id1, id2)) ;
					//                    if(i == 1 && planes != nil) {
					//                        planes->push_back(rbegin()->plane()) ;
					//                    }
					//
					//					vertices_[ id0 ].faces_.push_back(size()-1);
					//					vertices_[ id1 ].faces_.push_back(size()-1);
					//					vertices_[ id2 ].faces_.push_back(size()-1);
				}
			} 
		}
	}
}

/////////////////////////////////////////////////////////////////////////
// useful function

// e.g. C:\BenchmarkFlex\056574-5820-ff0.mrc --> 056574-5820-ff0.mrc
string get_file_name(const string &name)
{
	string filename = name;
	int len = filename.length();

	int pos = filename.rfind("\\");
	pos += 1;

	filename = filename.substr(pos, len);

	return filename;
}

// e.g. 056574-5820-ff0.mrc --> mrc
string get_file_extension_name(const string &name)
{
	string ext = name;
	int len = ext.length();
	int pos = ext.rfind(".");
	//pos = len - pos - 1;
	pos += 1;

	ext = ext.substr(pos, len);

	return ext;
}

// e.g. 056574-5820-ff0.mrc --> 056574-5820-ff0
string get_file_name2(const string &name)
{
	string filename = name;
	int len = filename.length();

	int pos1 = filename.rfind("\\");
	pos1 += 1;

	int pos2 = filename.rfind(".");

	filename = filename.substr(pos1, pos2);



	return filename;
}

// e.g. 056574-5820-ff0.mrc --> 056574
string get_group_name(const string &name)
{
	string filename = name;
	int len = filename.length();

	int pos1 = filename.find("-");

	filename = filename.substr(0, pos1);

	return filename;
}

// e.g. C:\BenchmarkFlex\056574-5820-ff0.mrc --> C:\BenchmarkProtein
string get_file_direction(const string &name)
{
	string filename = name;
	int len = filename.length();

	int pos = filename.rfind("\\");
	pos += 1;

	filename = filename.substr(0, pos);



	return filename;
}

